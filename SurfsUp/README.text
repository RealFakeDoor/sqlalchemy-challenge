SQLAlchemy Challenge

This project utilizes SQLAlchemy to perform data analysis and create a Flask API for accessing weather data stored in a SQLite database (hawaii.sqlite). The dataset contains precipitation and temperature measurements recorded at various stations in Hawaii.


Ensure that the necessary dependencies are installed before running the Flask application. 
You can install the dependencies using pip install -r requirements.txt.

Dependencies:

Python 3.x
Flask
SQLAlchemy
Matplotlib
Pandas

Files:
sqlalchemy-challenge.ipynb: 
A Jupyter Notebook containing data analysis using SQLAlchemy and Matplotlib.

app.py: 
A Flask application defining API routes for accessing the analyzed data.


Usage:
(Running the Flask App)
1. Ensure you are in the project directory.

2. open git bash or other terminal.

3. Copy code and press enter:

python app.py

This will launch the App in chrome browser. Ensure chrome is installed.

Making API Calls:
To retrieve precipitation data, use the following URL:
/api/v1.0/precipitation

To get a list of stations, use the following URL:
/api/v1.0/stations

To get temperature observations for the previous year, use the following URL:
/api/v1.0/tobs

To calculate temperature statistics for a specific start date, use the following URL format:
/api/v1.0/<start>

Replace <start> with the desired start date in the format 'YYYY-MM-DD'.
To calculate temperature statistics for a specific date range, use the following URL format:
/api/v1.0/<start>/<end>

Replace <start> and <end> with the desired start and end dates in the format 'YYYY-MM-DD'.



sql-alchemy-challenge.ipynb
1. Precipitation Analysis:
	Queries the database to retrieve precipitation data for all dates.
	Converts the query results into a dictionary with dates as keys and 	precipitation as values for the past year.
	Returns the precipitation data in JSON format.
2. Station Analysis:
	Queries the database to retrieve a list of stations.
	Returns a JSON list of stations with their codes and names.
3. Temperature Analysis:
	Finds the most active station based on the number of temperature 	observations.
	Retrieves temperature observations for the most active station for the 	previous year.
	Calculates summary statistics (minimum, average, maximum temperatures) for 	the retrieved data.
	Returns temperature observations and statistics in JSON format.
4. Temperature Analysis by Date:
	Allows querying temperature statistics for a specified start date.
	Allows querying temperature statistics for a specified start and end date 	range.
